{"ast":null,"code":"var _jsxFileName = \"D:\\\\bd\\\\client\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { api } from '../lib/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  useEffect(() => {\n    // Update unread count whenever notifications change\n    const newUnreadCount = notifications.filter(notif => !notif.read).length;\n    setUnreadCount(newUnreadCount);\n  }, [notifications]);\n  const addNotification = notification => {\n    setNotifications(prev => [notification, ...prev]);\n  };\n  const markAsRead = notificationId => {\n    setNotifications(prev => prev.map(notif => notif.id === notificationId ? {\n      ...notif,\n      read: true\n    } : notif));\n  };\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(notif => ({\n      ...notif,\n      read: true\n    })));\n  };\n  const clearNotifications = () => {\n    setNotifications([]);\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      notifications,\n      unreadCount,\n      addNotification,\n      markAsRead,\n      markAllAsRead,\n      clearNotifications\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"ZKbdJ33iEtJJ28qAyIajw14iMHg=\");\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","unreadCount","setUnreadCount","newUnreadCount","filter","notif","read","length","addNotification","notification","prev","markAsRead","notificationId","map","id","markAllAsRead","clearNotifications","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/bd/client/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { api } from '../lib/api';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport const useNotifications = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // Update unread count whenever notifications change\r\n    const newUnreadCount = notifications.filter(notif => !notif.read).length;\r\n    setUnreadCount(newUnreadCount);\r\n  }, [notifications]);\r\n\r\n  const addNotification = (notification) => {\r\n    setNotifications(prev => [notification, ...prev]);\r\n  };\r\n\r\n  const markAsRead = (notificationId) => {\r\n    setNotifications(prev =>\r\n      prev.map(notif =>\r\n        notif.id === notificationId\r\n          ? { ...notif, read: true }\r\n          : notif\r\n      )\r\n    );\r\n  };\r\n\r\n  const markAllAsRead = () => {\r\n    setNotifications(prev =>\r\n      prev.map(notif => ({ ...notif, read: true }))\r\n    );\r\n  };\r\n\r\n  const clearNotifications = () => {\r\n    setNotifications([]);\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider\r\n      value={{\r\n        notifications,\r\n        unreadCount,\r\n        addNotification,\r\n        markAsRead,\r\n        markAllAsRead,\r\n        clearNotifications\r\n      }}\r\n    >\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,GAAG,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,mBAAmB,gBAAGP,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMQ,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAMC,OAAO,GAAGT,UAAU,CAACM,mBAAmB,CAAC;EAC/C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6DAA6D,CAAC;EAChF;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,gBAAgB;AAQ7B,OAAO,MAAMI,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACpD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,cAAc,GAAGJ,aAAa,CAACK,MAAM,CAACC,KAAK,IAAI,CAACA,KAAK,CAACC,IAAI,CAAC,CAACC,MAAM;IACxEL,cAAc,CAACC,cAAc,CAAC;EAChC,CAAC,EAAE,CAACJ,aAAa,CAAC,CAAC;EAEnB,MAAMS,eAAe,GAAIC,YAAY,IAAK;IACxCT,gBAAgB,CAACU,IAAI,IAAI,CAACD,YAAY,EAAE,GAAGC,IAAI,CAAC,CAAC;EACnD,CAAC;EAED,MAAMC,UAAU,GAAIC,cAAc,IAAK;IACrCZ,gBAAgB,CAACU,IAAI,IACnBA,IAAI,CAACG,GAAG,CAACR,KAAK,IACZA,KAAK,CAACS,EAAE,KAAKF,cAAc,GACvB;MAAE,GAAGP,KAAK;MAAEC,IAAI,EAAE;IAAK,CAAC,GACxBD,KACN,CACF,CAAC;EACH,CAAC;EAED,MAAMU,aAAa,GAAGA,CAAA,KAAM;IAC1Bf,gBAAgB,CAACU,IAAI,IACnBA,IAAI,CAACG,GAAG,CAACR,KAAK,KAAK;MAAE,GAAGA,KAAK;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC,CAC9C,CAAC;EACH,CAAC;EAED,MAAMU,kBAAkB,GAAGA,CAAA,KAAM;IAC/BhB,gBAAgB,CAAC,EAAE,CAAC;EACtB,CAAC;EAED,oBACEV,OAAA,CAACC,mBAAmB,CAAC0B,QAAQ;IAC3BC,KAAK,EAAE;MACLnB,aAAa;MACbE,WAAW;MACXO,eAAe;MACfG,UAAU;MACVI,aAAa;MACbC;IACF,CAAE;IAAAnB,QAAA,EAEDA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;AAACxB,GAAA,CAhDWF,oBAAoB;AAAA2B,EAAA,GAApB3B,oBAAoB;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}